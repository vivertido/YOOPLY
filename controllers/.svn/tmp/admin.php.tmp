<?php

class Admin extends MY_Controller
{
	function __construct()
	{
		parent::__construct();

		if(!$this->session->userdata('userid'))
		{
			redirect('login');
			return;
		}
	}

	function index()
	{
		if($this->session->userdata('role') != 'a')
		{
			redirect('login');
			return;
		}

		$school_id = $this->session->userdata('schoolid');

		$this->load->model('Settings_model');
		$settings = json_decode($this->Settings_model->get_settings($school_id, SETTINGS_FEATURES));

		$this->load->model('Referral_model');
		$active_referrals = $this->Referral_model->get_active_referrals($school_id);

		$this->load->model('Settings_model');
		$demerit_settings = json_decode($this->Settings_model->get_settings($school_id, 'demerits'));
	
		$this->layout->view('admin/dashboard', array(
			'title_for_layout' => 'Admin Notification Center',
<<<<<<< .mine
			'referrals' => $active_referrals,
			'demeritlabel' => $demerit_settings->demeritlabel
=======
			'referrals' => $active_referrals,
			'settings' => $settings
>>>>>>> .r95
		));
	}

	function referral($referral_id)
	{
		if($this->session->userdata('role') != 'a')
		{
			redirect('login');
			return;
		}

		$this->load->model('Referral_model');
		$referral = $this->Referral_model->get_referral($referral_id);

		if(empty($referral))
		{
			$this->layout->view('admin/error_noreferralfound');
			return;
		}

		$this->load->model('User_model');
		$student = $this->User_model->get_user($referral->studentid);
		$teacher = $this->User_model->get_user($referral->teacherid);

		$this->layout->view('admin/referral', array(
			'title_for_layout' => $student->firstname.' '.$student->lastname,
			'teacher' => $teacher,
			'referral' => $referral
		));
	}

	function review($referral_id)
	{
		if($this->session->userdata('role') != 'a')
		{
			redirect('login');
			return;
		}

		if($this->input->post('cancel'))
		{
			redirect('admin');
			return;
		}

		$school_id = $this->session->userdata('schoolid');

		$this->load->model('Referral_model');
		$referral = $this->Referral_model->get_referral($referral_id);

		if(empty($referral))
		{
			$this->layout->view('admin/error_noreferralfound');
			return;
		}

		if($referral->schoolid != $school_id)
		{
			$this->layout->view('admin/error_permissiondenied');
			return;
		}

		if(!empty($referral->adminnotes))
		{
			redirect('referral/view/'.$referral_id);
			return;
		}

		$this->load->model('User_model');
		$student = $this->User_model->get_user($referral->studentid);

		if($this->input->post('submit'))
		{
			$admin_id = $this->session->userdata('userid');

			$notes = array(
				'internal' => array(
					'note' => $this->input->post('internalnotes')
				),
				'external' => array(
					'note' => $this->input->post('externalnotes'),
					'consequences' => array(),
					'detention' => $this->input->post('detention'),
					'suspension' => $this->input->post('suspension'),
				)
			);

			if($this->input->post('detention') > 0)
			{
				$reason = $this->input->post('reason');
				$this->load->model('Detention_model');
				$this->Detention_model->assign($school_id, $referral->studentid, $admin_id, $this->input->post('detention'), $reason);
			}

			if($this->input->post('consequence'))
			{
				$notes['external']['consequences'] = $this->input->post('consequence');
			}

			$this->Referral_model->save_admin($referral_id, $admin_id, $notes);

			redirect('admin');
		}
		else
		{
			$this->load->model('Settings_model');
			$settings = json_decode($this->Settings_model->get_settings($school_id, 'adminreview'));

			$this->layout->view('admin/review', array(
				'student' => $student,
				'settings' => $settings,
				'referral' => $referral,
				'title_for_layout' => $student->firstname.' '.$student->lastname
			));
		}
	}

	function reports()
	{
		if($this->session->userdata('role') != 'a')
		{
			redirect('login');
			return;
		}

		$school_id = $this->session->userdata('schoolid');

		$this->load->model('Referral_model');
		$this->load->model('Detention_model');

		$data = array('title_for_layout' => 'Reports');

		$this->load->model('Settings_model');
		$settings = json_decode($this->Settings_model->get_settings($school_id, SETTINGS_FEATURES));
		$data['settings'] = $settings;

		$data['referralstoday'] = $this->Referral_model->count_today($school_id);
		$data['detentionstoday'] = $this->Detention_model->count_today($school_id);

		$data['week'] = $this->Referral_model->category_totals($school_id, 'week');
		$data['month'] = $this->Referral_model->category_totals($school_id, 'month');
		$data['year'] = $this->Referral_model->category_totals($school_id, 'year');

		$data['teacher'] = $this->Referral_model->category_totals_byteacher($school_id);
		$data['grade'] = $this->Referral_model->category_totals_bygrade($school_id);

		$this->layout->view('admin/reports', $data);
	}

	function settings($sub = 'default', $param1 = '', $param2 = '')
	{
		if($this->session->userdata('role') != 'a')
		{
			redirect('login');
			return;
		}

		switch($sub)
		{
			case 'school':
			case 'user':
			case 'interventions':
			case 'reinforcements':
			case 'referrals':
			case 'reflection':
			case 'bully':
			case 'incident':
			case 'demerits':
			case 'consequences':
			case 'detentions':
			case 'status':
			case 'features':
				$sub = '_settings_'.$sub;
				$this->$sub();
			break;
			case 'form':
				$sub = '_settings_'.$sub;
				$this->$sub($param1, $param2);
			break;			
			case 'default':
				$school_id = $this->session->userdata('schoolid');
				$this->load->model('Settings_model');
				$features = json_decode($this->Settings_model->get_settings($school_id, SETTINGS_FEATURES));

				$this->layout->view('admin/settings', array('title_for_layout' => 'Settings', 'features' => $features));
			break;
		}
	}

	function _settings_features()
	{
		$this->load->model('Settings_model');

		$school_id = $this->session->userdata('schoolid');

		$settings = json_decode($this->Settings_model->get_settings($school_id, SETTINGS_FEATURES));

		$features = array(
			'detentions' => array(
				'title' => 'Detentions'
			),
			'referrals' => array(
				'title' => 'Referrals'
			),
			'demerits' => array(
				'title' => 'Negative Behaviors'
			),
			'interventions' => array(
				'title' => 'Interventions'
			),
			'reinforcements' => array(
				'title' => 'Positive Reinforcements'
			),			
			'shoutouts' => array(
				'title' => 'Shoutouts'
			),			
			'bullying' => array(
				'title' => 'Bully Reports'
			)
		); 

		if($this->input->post('submit'))
		{

			$new_settings = array();
			$features_enabled = $this->input->post('feature');

			foreach($features as $k=>$feature)
			{
			 	if(isset($features_enabled[$k]) && $features_enabled[$k] == '1')
			 	{
			 		$new_settings[$k] = 'ats';
			 	}
			 	else
			 	{
			 		$new_settings[$k] = false;
			 	}
			}

			$this->Settings_model->save($school_id, SETTINGS_FEATURES, $new_settings);

			redirect('admin/settings');
		}
		else
		{
			$this->layout->view('admin/settings_features', array('title_for_layout' => 'Features', 'settings' => $settings, 'features' => $features));
		}
	}

	function _settings_school()
	{
		if($this->input->post('submit'))
		{

		}
		else
		{
			$this->layout->view('admin/settings_school', array('title_for_layout' => 'School Settings'));
		}
	}

	function _settings_interventions()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		if($this->input->post('submit'))
		{
			$i = $this->input->post('intervention');

			$interventions = array();

			foreach($i as $intervention)
			{
				$intervention = trim($intervention);
				if(!empty($intervention))
				{
					array_push($interventions, $intervention);
				}
			}

			$quick_settings = json_decode($this->Settings_model->get_settings($school_id, 'quickentry'));
			$quick_settings->interventions = $interventions;
			$this->Settings_model->save($school_id, 'quickentry', $quick_settings);

			$this->Settings_model->save($school_id, 'interventions', $interventions);

			redirect('admin/settings');
		}
		else
		{
			$interventions = json_decode($this->Settings_model->get_settings($school_id, 'interventions'));

			$this->layout->view('admin/settings_interventions', array(
				'interventions' => $interventions,
				'title_for_layout' => 'Interventions'
			));
		}
	}

	function _settings_reinforcements()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		if($this->input->post('submit'))
		{
			$i = $this->input->post('reinforcement');

			$reinforcements = array();

			foreach($i as $reinforcement)
			{
				$reinforcement = trim($reinforcement);
				if(!empty($reinforcement))
				{
					array_push($reinforcements, $reinforcement);
				}
			}

			$award_type = $this->input->post('quantitytype');

			$quick_settings = json_decode($this->Settings_model->get_settings($school_id, 'quickentry'));
			$quick_settings->reinforcements = $reinforcements;

			$settings = array(
				'reinforcementlabel' => $this->input->post('reinforcementname'),
				'awardlabel' => $this->input->post('awardname'),
				'options' => $reinforcements,
				'quantitytype' => $award_type
			);

			$quick_settings->reinforcementsoptions = array(
				'awardlabel' => $this->input->post('awardname'),
				'quantitytype' => $award_type
			);

			switch($award_type)
			{
				case 'fixed':
					$quick_settings->reinforcementsoptions['awardamount'] = $this->input->post('awardamount');
					$settings['awardamount'] = $this->input->post('awardamount');
				break;
				case 'range':
					$quick_settings->reinforcementsoptions['awardamountmin'] = $this->input->post('awardamountmin');
					$quick_settings->reinforcementsoptions['awardamountmax'] = $this->input->post('awardamountmax');

					$settings['awardamountmin'] = $this->input->post('awardamountmin');
					$settings['awardamountmax'] = $this->input->post('awardamountmax');
				break;
				case 'number':
					$quick_settings->reinforcementsoptions['awardamountmax'] = $this->input->post('awardamountmax');
		 			$settings['awardamountmax'] = $this->input->post('awardamountmax');
				break;
			}

			$this->Settings_model->save($school_id, 'quickentry', $quick_settings);
			$this->Settings_model->save($school_id, 'reinforcements', $settings);

			redirect('admin/settings');
		}
		else
		{
			$reinforcements = json_decode($this->Settings_model->get_settings($school_id, 'reinforcements'));

			$this->layout->view('admin/settings_reinforcements', array(
				'reinforcements' => $reinforcements,
				'title_for_layout' => 'Reinforcements'
			));
		}
	}

	function _settings_demerits()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		if($this->input->post('submit'))
		{
			$i = $this->input->post('demerit');

			$demerits = array();

			foreach($i as $demerit)
			{
				$demerit = trim($demerit);
				if(!empty($demerit))
				{
					array_push($demerits, $demerit);
				}
			}

			$quick_settings = json_decode($this->Settings_model->get_settings($school_id, 'quickentry'));
			$quick_settings->negatives = $demerits;
			$this->Settings_model->save($school_id, 'quickentry', $quick_settings);

			$settings = array(
				'demeritlabel' => $this->input->post('demeritname'),
				'demerits' => $demerits
			);

			$this->Settings_model->save($school_id, 'demerits', $settings);

			redirect('admin/settings');
		}
		else
		{
			$demerits = json_decode($this->Settings_model->get_settings($school_id, 'demerits'));

			$this->layout->view('admin/settings_demerits', array(
				'demerits' => $demerits,
				'title_for_layout' => 'Negative Behaviors'
			));
		}
	}

	function _settings_referrals()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		if($this->input->post('submit'))
		{
			$keys = $settings = array();
			$settings['questions'] = $this->_process_edit_form('f', $keys);
			$settings['keys'] = $keys;

			$this->Settings_model->save($school_id, 'referrals', $settings);

			redirect('admin/settings');
		}
		else
		{
			$settings = json_decode($this->Settings_model->get_settings($school_id, 'referrals'));

			$this->layout->view('admin/settings_referrals', array(
				'settings' => $settings,
				'title_for_layout' => 'Referrals'
			));
		}
	}

	function _settings_reflection()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		$settings = json_decode($this->Settings_model->get_settings($school_id, 'reflection'));

		if($this->input->post('submit'))
		{
			$keys = array();
			$new_settings = array('questions' => $this->_process_edit_form('f', $keys));

			$this->Settings_model->save($school_id, 'reflection', $new_settings);

			redirect('admin/settings');
		}
		else
		{
			$this->layout->view('admin/settings_reflection', array(
				'settings' => $settings,
				'title_for_layout' => 'Reflection'
			));
		}
	}

	function _settings_user()
	{
		$school_id = $this->session->userdata('schoolid');

		$this->load->model('User_model');
		$users = $this->User_model->get_school_staff($school_id);

		$this->layout->view('admin/settings_user', array(
			'title_for_layout' => 'User Settings',
			'users' => $users
		));
	}

	function _settings_bully()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		if($this->input->post('submit'))
		{
			$settings = array();
			$keys = array();
			$settings['questions'] = $this->_process_edit_form('f', $keys);

			$this->Settings_model->save($school_id, 'bully', $settings);

			redirect('admin/settings');
		}
		else
		{
			$settings = json_decode($this->Settings_model->get_settings($school_id, 'bully'));

			$this->layout->view('admin/settings_bully', array(
				'settings' => $settings,
				'title_for_layout' => 'Bullying'
			));
		}
	}

	function _settings_incident()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		if($this->input->post('submit'))
		{
			$settings = array();
			$settings['questions'] = array(
				'easy' => $this->_process_edit_form('easy'),
				'detailed' => $this->_process_edit_form('detailed')
			);

			$this->Settings_model->save($school_id, 'incident', $settings);

			redirect('admin/settings');
		}
		else
		{
			$settings = json_decode($this->Settings_model->get_settings($school_id, 'incident'));

			$this->layout->view('admin/settings_incident', array(
				'settings' => $settings,
				'title_for_layout' => 'Incident Student Response'
			));
		}
	}

	function _settings_consequences()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		$admin_review = json_decode($this->Settings_model->get_settings($school_id, 'adminreview'));

		if($this->input->post('submit'))
		{
			$i = $this->input->post('consequence');

			$consequences = array();

			foreach($i as $consequence)
			{
				$demerit = trim($consequence);
				if(!empty($consequence))
				{
					array_push($consequences, $consequence);
				}
			}

			$admin_review->consequences = $consequences;

			$this->Settings_model->save($school_id, 'adminreview', $admin_review);

			redirect('admin/settings');
		}
		else
		{
			$this->layout->view('admin/settings_consequences', array(
				'consequences' => $admin_review->consequences,
				'title_for_layout' => 'Consequences'
			));
		}
	}

	function _settings_detentions()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		$this->load->model('Settings_model');
		$settings = json_decode($this->Settings_model->get_settings($school_id, 'quickentry'));

		if($this->input->post('submit'))
		{
			$i = $this->input->post('detention');

			$detentions = array();

			foreach($i as $detention)
			{
				$detention = trim($detention);
				if(!empty($detention))
				{
					array_push($detentions, $detention);
				}
			}

			$settings->detentions = $detentions;

			$this->Settings_model->save($school_id, 'quickentry', $settings);

			redirect('admin/settings');

		}
		else
		{
			$this->layout->view('admin/settings_detentions', array(
				'detentions' => $settings->detentions,
				'title_for_layout' => 'Detentions'
			));
		}

	}

	function _settings_status()
	{
		$school_id = $this->session->userdata('schoolid');
		$this->load->model('Settings_model');

		if($this->input->post('submit'))
		{
			$i = $this->input->post('status');

			$statuses = array();

			foreach($i as $status)
			{
				$status = trim($status);
				if(!empty($status))
				{
					array_push($statuses, $status);
				}
			}

			$quick_settings = json_decode($this->Settings_model->get_settings($school_id, 'quickentry'));
			$quick_settings->statuses = $statuses;
			$this->Settings_model->save($school_id, 'quickentry', $quick_settings);

			$settings = array(
				'statuses' => $statuses
			);

			$this->Settings_model->save($school_id, 'statuses', $settings);

			redirect('admin/settings');
		}
		else
		{
			$statuses = json_decode($this->Settings_model->get_settings($school_id, 'statuses'));

			$this->layout->view('admin/settings_statuses', array(
				'statuses' => $statuses,
				'title_for_layout' => 'Statuses'
			));
		}
	}	

	function _settings_form($action = '', $form_id = '')
	{
		$this->load->model('Form_model');

		$school_id = $this->session->userdata('schoolid');

		switch($action)
		{
			case 'add':
				if($this->input->post('submit'))
				{
					$elements = $this->input->post('element');
					$labels = $this->input->post('easylabel');
					$placeholders = $this->input->post('placeholder');

					$form_data = array();
					$i = 0;
					foreach($elements as $k=>$type)
					{
						switch($type)
						{
							case 'text':
								array_push($form_data, array('id' => md5($i), 'type' => 'text', 'label' => $labels[$k], 'placeholder' => $placeholders[$k]));
								$i++;
							break;
							case 'textbox':
								array_push($form_data, array('id' => md5($i), 'type' => 'textbox', 'label' => $labels[$k], 'placeholder' => $placeholders[$k]));
								$i++;
							break;							
						}
					}

					$viewers = $this->input->post('viewer');
					$contributors = $this->input->post('contributor');

					$viewer = '';
					foreach($viewers as $k=>$v)
					{
						switch($k)
						{
							case 'admin': $viewer .= 'a'; break;
							case 'teacher': $viewer .= 't'; break;
							case 'student': $viewer .= 's'; break;
						}
					}

					$contributor = '';
					foreach($contributors as $k=>$c)
					{
						switch($k)
						{
							case 'admin': $contributor .= 'a'; break;
							case 'teacher': $contributor .= 't'; break;
							case 'student': $contributor .= 's'; break;
						}
					}		

					$this->Form_model->create($school_id, $viewer, $contributor, $form_data);
				}
				else
				{
					$data = array();
					$this->layout->view('admin/settings_formsmodify', $data);
				}
			break;
			default:

				$forms = $this->Form_model->get_forms($school_id);
				
				$this->layout->view('admin/settings_forms', array('forms' => $forms));
			break;
		}
	}

	function _process_edit_form($prefix = '', &$keys = array())
	{
		$labels = $this->input->post($prefix.'label');
		$placeholders = $this->input->post($prefix.'placeholder');
		$required = $this->input->post($prefix.'required');
		$multiple = $this->input->post($prefix.'multiple');

		$form_key = $this->input->post('key');
		if($form_key === false)
		{
			$form_key = array();
		}

//		header('Content-type: text/plain');
//		print_r($placeholders);

		$elements = array();
		foreach($labels as $key=>$value)
		{
			list($element, $id) = preg_split('/_/', $key);

			$is_required = !empty($required) && array_key_exists($id, $required) ? 1 : 0;
			$new_id = md5($value);

			if(array_key_exists($id, $form_key))
			{
				$keys[$form_key[$id]] = $new_id;
			}

			switch($element)
			{
				case 'instruction':
					array_push($elements, array(
						'type' => 'instruction',
						'id' => md5($value),
						'text' => $value
					));
				break;
				case 'textarea':
					$placeholder = isset($placeholders[$key]) ? $placeholders[$key] : '';
					array_push($elements, array(
						'type' => 'textarea',
						'id' => md5($value),
						'label' => $value,
						'placeholder' => $placeholder,
						//'required' => $is_required,
					));
				break;
				case 'list':
					$opt = $this->input->post($id.'option');

					$options = array();

					foreach($opt as $o)
					{
						if(empty($o))
						{
							continue;
						}

						array_push($options, $o);
					}

					array_push($elements, array(
						'type' => 'multicheckbox',
						'id' => md5($value),
						'label' => $value,
						//'required' => $is_required,
						'options' => $options
					));
				break;
				case 'select':
					$opt = $this->input->post($id.'option');

					$options = array();

					foreach($opt as $o)
					{
						if(empty($o))
						{
							continue;
						}

						array_push($options, $o);
					}

					array_push($elements, array(
						'type' => 'select',
						'id' => md5($value),
						'label' => $value,
						//'required' => $is_required,
						'options' => $options
					));
				break;
				case 'personsearch':
					$allow_multiple = !empty($multiple) && $multiple[$id] == '1' ? 'true' : 'false';

					array_push($elements, array(
						'type' => 'personsearch',
						'label' => $value,
						'id' => md5($value),
						'multiple' => $allow_multiple,
						//'required' => $is_required,
					));
				break;
				case 'controlgroup':
					array_push($elements, array(
						'type' => 'controlgroup',
						'id' => md5($value),
						'label' => $value,
						'elements' => $this->_process_edit_form($id)
					));
				break;
				case 'collapsible':
					array_push($elements, array(
						'type' => 'collapsible',
						'id' => md5($value),
						'label' => $value,
						'elements' => $this->_process_edit_form($id)
					));
				break;
			}
		}

		return $elements;
	}

	function checkinstudent($referral_id)
	{
		if($this->session->userdata('role') != 'a')
		{
			redirect('login');
			return;
		}

		$this->load->model('Referral_model');
		$referral = $this->Referral_model->get_referral($referral_id);

		if(empty($referral))
		{
			$this->layout->view('admin/error_noreferralfound');
			return;
		}

		$school_id = $this->session->userdata('schoolid');

		if($referral->schoolid != $school_id)
		{
			$this->layout->view('admin/error_permissiondenied');
			return;
		}

		$this->Referral_model->check_in_student($referral_id);

		redirect('admin/referral/'.$referral_id);
	}

	function sendbacktoclass($referral_id)
	{
		if($this->session->userdata('role') != 'a')
		{
			redirect('login');
			return;
		}

		$this->load->model('Referral_model');
		$referral = $this->Referral_model->get_referral($referral_id);

		if(empty($referral))
		{
			$this->layout->view('admin/error_noreferralfound');
			return;
		}

		$school_id = $this->session->userdata('schoolid');

		if($referral->schoolid != $school_id)
		{
			$this->layout->view('admin/error_permissiondenied');
			return;
		}

		$this->Referral_model->send_back_to_class($referral_id);

		redirect('admin');
	}

	function students()
	{
		if($this->session->userdata('role') != 'a')
		{
			redirect('login');
			return;
		}

		$school_id = $this->session->userdata('schoolid');

		$this->load->model('Group_model');
		$groups = $this->Group_model->get_groups_by_school($school_id);

		$data = array(
			'title_for_layout' => 'Students',
			'groups' => $groups
		);

		$this->load->model('User_model');
		$total_unassigned = $this->User_model->count_unassigned($school_id);

		if($total_unassigned > 0)
		{
			$data['showunassigned'] = true;
		}

		$this->layout->view('admin/students', $data);
	}

	function interventions($period = '')
	{
		$school_id = $this->session->userdata('schoolid');
		$user_id = $this->session->userdata('userid');

		$data = array(
			'title_for_layout' => 'My Interventions',
		);

		$start_time = $end_time = 0;
		switch($period)
		{
			case 'month':
				$start_time = strtotime(date('Y-m-01 00:00:00'));
				$end_time = strtotime(date('Y-m-t 23:59:59'));
				$data['period'] = $period;
			break;
			case 'week':
				$start_time = strtotime('last sunday');
				$end_time = strtotime('next sunday')-1;
				$data['period'] = 'week';
			break;
			case 'all':
				$data['period'] = 'all';
			break;
			default:
			case 'today':
				$start_time = strtotime(date('Y-m-d 00:00:00'));
				$data['period'] = 'today';
			break;
		}

		$this->load->model('Intervention_model');
		$data['interventions'] = $this->Intervention_model->get_by_school($school_id, 0, 0, true, true, $start_time, $end_time);

		$this->layout->view('admin/interventions', $data);
	}

	function users($page = 0)
	{
		$this->load->model('User_model');

		$school_id = $this->session->userdata('schoolid');
		$user_id = $this->session->userdata('userid');

		$firstname = $this->input->post('firstname');
		$lastname = $this->input->post('lastname');
		$email = $this->input->post('email');

		$saved = false;

		if($this->input->post('submit'))
		{
			foreach($firstname as $k=>$v)
			{
				$this->db->update('Users', array(
					'firstname' => $firstname[$k],
					'lastname' => $lastname[$k],
					'email' => $email[$k]
				), array('userid' => $k));
			}

			$saved = true;
		}

		$users = $this->User_model->get_students_from_school($school_id, 50, $page*50);

		$total = $this->User_model->count_students_from_school($school_id);

		$data = array(
			'users' => $users,
			'page' => $page
		);

		if($saved)
		{
			$data['saved'] = true;
		}

		if(($page+1)*50 < $total)
		{
			$data['next'] = $page+1;
		}

		if($page > 0)
		{
			$data['previous'] = $page-1;
		}

		$this->layout->view('admin/users', $data);
	}

}
?>